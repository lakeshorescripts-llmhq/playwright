import { test, expect, devices } from '@playwright/test';import { test, expect, devices } from '@playwright/test';

import { setupBrowserContext } from './utils/browserSetup.js';import { set// R    // Return mock response

import { getHarPath } from './utils/harUtils.js';    return {

import { selectors } from './utils/selectors.js';      success: true,

import { applyMockGooglePay } from './utils/mockGooglePay';      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout/address-verification"

    }; mock response

import { fileURLToPath } from 'url';    return {

import path from 'path';      success: true,

      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout/address-verification"

// ESM workaround for __dirname    };wserContext } from './utils/browserSetup.js';

const __filename = fileURLToPath(import.meta.url);import { getHarPath } from './utils/harUtils.js';

const __dirname = path.dirname(__filename);import { selectors } from './utils/selectors.js';

import { applyMockGooglePay } from './utils/mockGooglePay';

test.use({

  ...devices['Desktop Chrome'],import { fileURLToPath } from 'url';

  viewport: { width: 1920, height: 1080 },import path from 'path';

  launchOptions: {

    args: ['--disable-gpu', '--no-sandbox', '--disable-web-security']// ESM workaround for __dirname

  }const __filename = fileURLToPath(import.meta.url);

});const __dirname = path.dirname(__filename);



test.setTimeout(120000);test.use({

  ...devices['Desktop Chrome'],

test('Google Pay checkout flow with HAR recording or mocking', async ({ page }) => {  viewport: { width: 1920, height: 1080 },

  const harPath = getHarPath('googlepay.har');  launchOptions: {

  const shouldRecordHar = true;    args: ['--disable-gpu', '--no-sandbox', '--disable-web-security']

  }

  await page.goto('https://wwwtest.lakeshorelearning.com/');});

  await page.locator(selectors.searchInput).click();

  await page.locator(selectors.searchInput).fill('TEST050');

  await page.locator(selectors.searchInput).press('Enter');test.setTimeout(120000);

  await page.locator(selectors.searchButton).click();

  await page.locator(selectors.addToCart).click();test('Google Pay checkout flow with HAR recording or mocking', async () => {

  const harPath = getHarPath('googlepay.har'); // ✅ Use utility instead of manual path.resolve

  // Define the mock Google Pay functionality  const shouldRecordHar = true; // Set to true to record, false to use existing HAR

  await page.exposeFunction('mockGooglePayHandler', async () => {

    const mockPayload = {  const { browser, context } = await setupBrowserContext(harPath, shouldRecordHar);

      shippingFirstName: "US",  const page = await context.newPage();

      shippingLastName: "User",

      shippingAddress1: "1600 Amphitheatre Parkway",  await page.goto('/');

      shippingAddress2: "",  await page.locator(selectors.searchInput).click();

      shippingCity: "Mountain View",  await page.locator(selectors.searchInput).fill('TEST050');

      shippingCountry: "US",  await page.locator(selectors.searchInput).press('Enter');

      shippingPostalCode: "94043",  await page.locator(selectors.searchButton).click();

      shippingPhoneNumber: "6505555555",  await page.locator(selectors.addToCart).click();

      shippingState: "CA",  // Setup Google Pay mock handlers

      firstName: "Card",  // Define the mock Google Pay functionality

      lastName: "Holder Name",  await page.exposeFunction('mockGooglePayHandler', async () => {

      address1: "1600 Amphitheatre Parkway",    const mockPayload = {

      address2: "",      shippingFirstName: "US",

      city: "Mountain View",      shippingLastName: "User",

      country: "US",      shippingAddress1: "1600 Amphitheatre Parkway",

      postalCode: "94043",      shippingAddress2: "",

      state: "CA",      shippingCity: "Mountain View",

      cardNetwork: "VISA",      shippingCountry: "US",

      cardDetails: "1000",      shippingPostalCode: "94043",

      cardDisplayName: "Card Holder Name",      shippingPhoneNumber: "6505555555",

      phoneNumber: "6505555555",      shippingState: "CA",

      useRegistryAddress: null,      firstName: "Card",

      orderShipType: "PICKUP",      lastName: "Holder Name",

      token: "eyJzaWduYXR1cmUiOiJNRVFDSUNneWh4Zm1WT0lISVh6OWRBNm4zcHVma1FFMHM2c213VENnNFZrMDhqcVpBaUI0bGpNM1JJSC9jQm9POGtqdFg3ODBuK29xQkNsOVdJd0xqR0cydU1Ddll3XHUwMDNkXHUwMDNkIiwicHJvdG9jb2xWZXJzaW9uIjoiRUN2MSIsInNpZ25lZE1lc3NhZ2UiOiJ7XCJlbmNyeXB0ZWRNZXNzYWdlXCI6XCJDSE9YMkEyNTZCcjViSXRsdUI5cFA4bGdXd0ZzeEN0RnE0QjMzSE1sL2FGeXBBZ2hwZENNNDVBQU5LZHBiNXRjbE9NSDZDendpVVhKK1hBcXlQVjhUeFlHWFBScTlSUU5TTXRoRi9RYWVJQlVzUHNSV1QzTFNQRjY0OEFtejNJY0Y4V3FHQ2JiTDR0ZGlBWGt5Nk1zTHpqMjdUU05xK0xpMmxQRXcxU08zSUFMZUFqcVNTaXJjMFJzbFd0aWhpNDNSUjdUUVY4bHJJZkR4NG9ZZC9ycGdXVzJoTE12WkVVc0dieTdXVnIxVTlWZG1abjBzc2xMc1BrMXlkOWNFbmdjVTBldzE1L2xnU3VUZk5nYUxaNFIzQ2hCdEtCMVM0TXBnVGdnZkpFL0pvU1lHZW12VWtYU3Q4cVdBNDcybk42UmtiYUgwWHJBM0d6WDV0WGJ6elYzMXJMaUQrclpoS2FXaloxTm96WXF2aXE4VFlBY2hqTjJTZUN6RUVFOHNPclo1cW8zS3Z5NDdQUjErS0kxQ2dUM3UwVFQ1TWNsZWh2MVVyV0dSRnRDZ2RDZU1FZ2hMV1FcXHUwMDNkXCIsXCJlcGhlbWVyYWxQdWJsaWNLZXlcIjpcIkJMTkRWL2t4RlZ2UUZyV3V3aVIzcko3NDEwWFp4TWdaOEs4TmZJZWVLRGsvYlk5U1RWWXNkRW1DaHlGVnQyUXFsRDI3MmxBWS9GN3pRamRpRGZMNHFYRVxcdTAwM2RcIixcInRhZ1wiOlwiOHhOOVYwdCs1dUxjUjY4UXFvUlpiV2lpRUhrdk5YeklkKzRtTzdwUTNDWVxcdTAwM2RcIn0ifQ==",      address1: "1600 Amphitheatre Parkway",

      tokenType: "PAYMENT_GATEWAY",      address2: "",

      description: "SuccessfulAuth: Visa •••• 1000",      city: "Mountain View",

      email: "test@gmail.com"      country: "US",

    };      postalCode: "94043",

      state: "CA",

    // Return mock response      cardNetwork: "VISA",

    return {      cardDetails: "1000",

      success: true,      cardDisplayName: "Card Holder Name",

      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout-page/"      phoneNumber: "6505555555",

    };      useRegistryAddress: null,

  });      orderShipType: "PICKUP",

      token: "eyJzaWduYXR1cmUiOiJNRVFDSUNneWh4Zm1WT0lISVh6OWRBNm4zcHVma1FFMHM2c213VENnNFZrMDhqcVpBaUI0bGpNM1JJSC9jQm9POGtqdFg3ODBuK29xQkNsOVdJd0xqR0cydU1Ddll3XHUwMDNkXHUwMDNkIiwicHJvdG9jb2xWZXJzaW9uIjoiRUN2MSIsInNpZ25lZE1lc3NhZ2UiOiJ7XCJlbmNyeXB0ZWRNZXNzYWdlXCI6XCJDSE9YMkEyNTZCcjViSXRsdUI5cFA4bGdXd0ZzeEN0RnE0QjMzSE1sL2FGeXBBZ2hwZENNNDVBQU5LZHBiNXRjbE9NSDZDendpVVhKK1hBcXlQVjhUeFlHWFBScTlSUU5TTXRoRi9RYWVJQlVzUHNSV1QzTFNQRjY0OEFtejNJY0Y4V3FHQ2JiTDR0ZGlBWGt5Nk1zTHpqMjdUU05xK0xpMmxQRXcxU08zSUFMZUFqcVNTaXJjMFJzbFd0aWhpNDNSUjdUUVY4bHJJZkR4NG9ZZC9ycGdXVzJoTE12WkVVc0dieTdXVnIxVTlWZG1abjBzc2xMc1BrMXlkOWNFbmdjVTBldzE1L2xnU3VUZk5nYUxaNFIzQ2hCdEtCMVM0TXBnVGdnZkpFL0pvU1lHZW12VWtYU3Q4cVdBNDcybk42UmtiYUgwWHJBM0d6WDV0WGJ6elYzMXJMaUQrclpoS2FXaloxTm96WXF2aXE4VFlBY2hqTjJTZUN6RUVFOHNPclo1cW8zS3Z5NDdQUjErS0kxQ2dUM3UwVFQ1TWNsZWh2MVVyV0dSRnRDZ2RDZU1FZ2hMV1FcXHUwMDNkXCIsXCJlcGhlbWVyYWxQdWJsaWNLZXlcIjpcIkJMTkRWL2t4RlZ2UUZyV3V3aVIzcko3NDEwWFp4TWdaOEs4TmZJZWVLRGsvYlk5U1RWWXNkRW1DaHlGVnQyUXFsRDI3MmxBWS9GN3pRamRpRGZMNHFYRVxcdTAwM2RcIixcInRhZ1wiOlwiOHhOOVYwdCs1dUxjUjY4UXFvUlpiV2lpRUhrdk5YeklkKzRtTzdwUTNDWVxcdTAwM2RcIn0ifQ==",

  // Inject UI handlers      tokenType: "PAYMENT_GATEWAY",

  await page.addInitScript(() => {      description: "SuccessfulAuth: Visa •••• 1000",

    window.LLUtils = {      email: "test@gmail.com"

      googlePayPaymentRequest: {    };

        orderShipType: 'PICKUP'

      },        // Return mock response

      publish: (event: string, data: any) => {    return {

        console.log('Published event:', event, data);      success: true,

      }      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout-page/"

    };    };

  });  });



  try {  // Inject UI handlers

    console.log('Clicking Google Pay button...');  await page.addInitScript(() => {

    await page.getByRole('button', { name: 'Google Pay' }).click();    window.LLUtils = {

          googlePayPaymentRequest: {

    console.log('Applying mock Google Pay...');        orderShipType: 'PICKUP'

    const result = await page.evaluate(async () => {      },

      try {      publish: (event: string, data: any) => {

        const response = await window.mockGooglePayHandler();        console.log('Published event:', event, data);

        console.log('Mock handler response:', response);      }

            };

        if (response.redirectURL) {  });

          window.location.href = response.redirectURL;

        }  try {

            console.log('Clicking Google Pay button...');

        return response;    await page.getByRole('button', { name: 'Google Pay' }).click();

      } catch (error) {    

        console.error('Error in page context:', error);    console.log('Applying mock Google Pay...');

        throw error;    const result = await page.evaluate(async () => {

      }      try {

    });        const response = await window.mockGooglePayHandler();

            console.log('Mock handler response:', response);

    console.log('Mock Google Pay result:', result);        

        if (response.redirectURL) {

    // Wait for navigation          const fullUrl = new URL(response.redirectURL, window.location.origin).toString();

    console.log('Current URL before navigation:', await page.url());          console.log('Navigating to:', fullUrl);

    await Promise.all([          window.location.href = fullUrl;

      page.waitForURL('**/checkout-page/**', { timeout: 30000 }),        }

      page.waitForNavigation({ waitUntil: 'networkidle' })        

    ]);        return response;

    console.log('After navigation, current URL:', await page.url());      } catch (error) {

        console.error('Error in page context:', error);

    // Check for address verification dialog        throw error;

    const addressDialog = page.getByRole('heading', { name: /address verification/i });      }

    await expect(addressDialog).toBeVisible({ timeout: 10000 });    });

        

    // Check for suggested address    console.log('Mock Google Pay result:', result);

    const suggestedAddress = page.getByRole('heading', { name: /suggested address/i });

    await expect(suggestedAddress).toBeVisible();    // Wait for navigation with debug info

    await suggestedAddress.click();    console.log('Current URL before navigation:', await page.url());

        await Promise.all([

    // Select address      page.waitForURL('**/checkout-page/**', { timeout: 30000 }),

    const selectBtn = page.getByRole('button', { name: /select address/i });      page.waitForNavigation({ waitUntil: 'networkidle' })

    await expect(selectBtn).toBeVisible();    ]);

    await selectBtn.click();

        // Check for address verification dialog

    // Verify dialog is closed    const addressDialog = page.getByRole('heading', { name: /address verification/i });

    await expect(addressDialog).not.toBeVisible();    await expect(addressDialog).toBeVisible({ timeout: 10000 });

    

  } catch (error) {    // Check for suggested address

    console.error('Error in test context:', error);    const suggestedAddress = page.getByRole('heading', { name: /suggested address/i });

    console.error('Current URL:', await page.url());    await expect(suggestedAddress).toBeVisible();

    throw error;    await suggestedAddress.click();

  }    

    // Select address

  const submitOrderButton = page.locator(selectors.submitOrderButton);    const selectBtn = page.getByRole('button', { name: /select address/i });

  await expect(submitOrderButton).toBeVisible();    await expect(selectBtn).toBeVisible();

  await expect(submitOrderButton).toBeEnabled();    await selectBtn.click();

    

  const url = page.url();    // Verify dialog is closed

  expect(url).not.toMatch(/^https:\/\/www\.lakeshorelearning\.com/);    await expect(addressDialog).not.toBeVisible();

  expect(url).not.toMatch(/^https:\/\/oclive.*\.llmhq\.com/);

  } catch (error) {

  await submitOrderButton.click();    console.error('Error in test context:', error);

      console.error('Current URL:', await page.url());

  // Wait for navigation and network idle state    throw error;

  await Promise.all([  }

    page.waitForNavigation(),

    page.waitForLoadState('networkidle')  const submitOrderButton = page.locator(selectors.submitOrderButton);

  ]);  await expect(submitOrderButton).toBeVisible();

  await expect(submitOrderButton).toBeEnabled();

  await expect(page).toHaveURL(/order-confirmation-page/, { timeout: 30000 });

  await expect(page.locator(selectors.thankYouHeading)).toBeVisible({ timeout: 10000 });  const url = page.url();

  expect(url).not.toMatch(/^https:\/\/www\.lakeshorelearning\.com/);

  const total = page.getByText(selectors.totalAmount).first();  expect(url).not.toMatch(/^https:\/\/oclive.*\.llmhq\.com/);

  await expect(total).toBeVisible();

});  await submitOrderButton.click();
  
  // Wait for navigation and network idle state
  await Promise.all([
    page.waitForNavigation(),
    page.waitForLoadState('networkidle')
  ]);

  await expect(page).toHaveURL(/order-confirmation-page/, { timeout: 30000 });
  await expect(page.locator(selectors.thankYouHeading)).toBeVisible({ timeout: 10000 });

  const total = page.getByText(selectors.totalAmount).first();
  await expect(total).toBeVisible();

  await context.close();
  await browser.close();
});
