import { test, expect, devices } from '@playwright/test';
import { set// R    // Return mock response
    return {
      success: true,
      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout/address-verification"
    }; mock response
    return {
      success: true,
      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout/address-verification"
    };wserContext } from './utils/browserSetup.js';
import { getHarPath } from './utils/harUtils.js';
import { selectors } from './utils/selectors.js';
import { applyMockGooglePay } from './utils/mockGooglePay';

import { fileURLToPath } from 'url';
import path from 'path';

// ESM workaround for __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

test.use({
  ...devices['Desktop Chrome'],
  viewport: { width: 1920, height: 1080 },
  launchOptions: {
    args: ['--disable-gpu', '--no-sandbox', '--disable-web-security']
  }
});


test.setTimeout(120000);

test('Google Pay checkout flow with HAR recording or mocking', async () => {
  const harPath = getHarPath('googlepay.har'); // ✅ Use utility instead of manual path.resolve
  const shouldRecordHar = true; // Set to true to record, false to use existing HAR

  const { browser, context } = await setupBrowserContext(harPath, shouldRecordHar);
  const page = await context.newPage();

  await page.goto('/');
  await page.locator(selectors.searchInput).click();
  await page.locator(selectors.searchInput).fill('TEST050');
  await page.locator(selectors.searchInput).press('Enter');
  await page.locator(selectors.searchButton).click();
  await page.locator(selectors.addToCart).click();
  // Setup Google Pay mock handlers
  // Define the mock Google Pay functionality
  await page.exposeFunction('mockGooglePayHandler', async () => {
    const mockPayload = {
      shippingFirstName: "US",
      shippingLastName: "User",
      shippingAddress1: "1600 Amphitheatre Parkway",
      shippingAddress2: "",
      shippingCity: "Mountain View",
      shippingCountry: "US",
      shippingPostalCode: "94043",
      shippingPhoneNumber: "6505555555",
      shippingState: "CA",
      firstName: "Card",
      lastName: "Holder Name",
      address1: "1600 Amphitheatre Parkway",
      address2: "",
      city: "Mountain View",
      country: "US",
      postalCode: "94043",
      state: "CA",
      cardNetwork: "VISA",
      cardDetails: "1000",
      cardDisplayName: "Card Holder Name",
      phoneNumber: "6505555555",
      useRegistryAddress: null,
      orderShipType: "PICKUP",
      token: "eyJzaWduYXR1cmUiOiJNRVFDSUNneWh4Zm1WT0lISVh6OWRBNm4zcHVma1FFMHM2c213VENnNFZrMDhqcVpBaUI0bGpNM1JJSC9jQm9POGtqdFg3ODBuK29xQkNsOVdJd0xqR0cydU1Ddll3XHUwMDNkXHUwMDNkIiwicHJvdG9jb2xWZXJzaW9uIjoiRUN2MSIsInNpZ25lZE1lc3NhZ2UiOiJ7XCJlbmNyeXB0ZWRNZXNzYWdlXCI6XCJDSE9YMkEyNTZCcjViSXRsdUI5cFA4bGdXd0ZzeEN0RnE0QjMzSE1sL2FGeXBBZ2hwZENNNDVBQU5LZHBiNXRjbE9NSDZDendpVVhKK1hBcXlQVjhUeFlHWFBScTlSUU5TTXRoRi9RYWVJQlVzUHNSV1QzTFNQRjY0OEFtejNJY0Y4V3FHQ2JiTDR0ZGlBWGt5Nk1zTHpqMjdUU05xK0xpMmxQRXcxU08zSUFMZUFqcVNTaXJjMFJzbFd0aWhpNDNSUjdUUVY4bHJJZkR4NG9ZZC9ycGdXVzJoTE12WkVVc0dieTdXVnIxVTlWZG1abjBzc2xMc1BrMXlkOWNFbmdjVTBldzE1L2xnU3VUZk5nYUxaNFIzQ2hCdEtCMVM0TXBnVGdnZkpFL0pvU1lHZW12VWtYU3Q4cVdBNDcybk42UmtiYUgwWHJBM0d6WDV0WGJ6elYzMXJMaUQrclpoS2FXaloxTm96WXF2aXE4VFlBY2hqTjJTZUN6RUVFOHNPclo1cW8zS3Z5NDdQUjErS0kxQ2dUM3UwVFQ1TWNsZWh2MVVyV0dSRnRDZ2RDZU1FZ2hMV1FcXHUwMDNkXCIsXCJlcGhlbWVyYWxQdWJsaWNLZXlcIjpcIkJMTkRWL2t4RlZ2UUZyV3V3aVIzcko3NDEwWFp4TWdaOEs4TmZJZWVLRGsvYlk5U1RWWXNkRW1DaHlGVnQyUXFsRDI3MmxBWS9GN3pRamRpRGZMNHFYRVxcdTAwM2RcIixcInRhZ1wiOlwiOHhOOVYwdCs1dUxjUjY4UXFvUlpiV2lpRUhrdk5YeklkKzRtTzdwUTNDWVxcdTAwM2RcIn0ifQ==",
      tokenType: "PAYMENT_GATEWAY",
      description: "SuccessfulAuth: Visa •••• 1000",
      email: "test@gmail.com"
    };

        // Return mock response
    return {
      success: true,
      redirectURL: "https://wwwtest.lakeshorelearning.com/checkout-page/"
    };
  });

  // Inject UI handlers
  await page.addInitScript(() => {
    window.LLUtils = {
      googlePayPaymentRequest: {
        orderShipType: 'PICKUP'
      },
      publish: (event: string, data: any) => {
        console.log('Published event:', event, data);
      }
    };
  });

  try {
    console.log('Clicking Google Pay button...');
    await page.getByRole('button', { name: 'Google Pay' }).click();
    
    console.log('Applying mock Google Pay...');
    const result = await page.evaluate(async () => {
      try {
        const response = await window.mockGooglePayHandler();
        console.log('Mock handler response:', response);
        
        if (response.redirectURL) {
          const fullUrl = new URL(response.redirectURL, window.location.origin).toString();
          console.log('Navigating to:', fullUrl);
          window.location.href = fullUrl;
        }
        
        return response;
      } catch (error) {
        console.error('Error in page context:', error);
        throw error;
      }
    });
    
    console.log('Mock Google Pay result:', result);

    // Wait for navigation with debug info
    console.log('Current URL before navigation:', await page.url());
    await Promise.all([
      page.waitForURL('**/checkout-page/**', { timeout: 30000 }),
      page.waitForNavigation({ waitUntil: 'networkidle' })
    ]);

    // Check for address verification dialog
    const addressDialog = page.getByRole('heading', { name: /address verification/i });
    await expect(addressDialog).toBeVisible({ timeout: 10000 });
    
    // Check for suggested address
    const suggestedAddress = page.getByRole('heading', { name: /suggested address/i });
    await expect(suggestedAddress).toBeVisible();
    await suggestedAddress.click();
    
    // Select address
    const selectBtn = page.getByRole('button', { name: /select address/i });
    await expect(selectBtn).toBeVisible();
    await selectBtn.click();
    
    // Verify dialog is closed
    await expect(addressDialog).not.toBeVisible();

  } catch (error) {
    console.error('Error in test context:', error);
    console.error('Current URL:', await page.url());
    throw error;
  }

  const submitOrderButton = page.locator(selectors.submitOrderButton);
  await expect(submitOrderButton).toBeVisible();
  await expect(submitOrderButton).toBeEnabled();

  const url = page.url();
  expect(url).not.toMatch(/^https:\/\/www\.lakeshorelearning\.com/);
  expect(url).not.toMatch(/^https:\/\/oclive.*\.llmhq\.com/);

  await submitOrderButton.click();
  
  // Wait for navigation and network idle state
  await Promise.all([
    page.waitForNavigation(),
    page.waitForLoadState('networkidle')
  ]);

  await expect(page).toHaveURL(/order-confirmation-page/, { timeout: 30000 });
  await expect(page.locator(selectors.thankYouHeading)).toBeVisible({ timeout: 10000 });

  const total = page.getByText(selectors.totalAmount).first();
  await expect(total).toBeVisible();

  await context.close();
  await browser.close();
});
